apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '0.1'

// Default args suitable for testing: --port 9100 9101 --dest http://localhost:9200/incoming
mainClassName = 'petrglad.msgsort.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile 'net.sourceforge.argparse4j:argparse4j:0.5.0'

    compile 'io.netty:netty-all:4.0.27.Final'
    compile('org.apache.httpcomponents:httpclient:4.4.1') {
        exclude group: 'commons-logging'
    }

    compile 'org.slf4j:slf4j-api:1.7.12'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.12'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.12'
    runtime 'ch.qos.logback:logback-classic:1.1.3'

    testCompile 'junit:junit:4.11'

    // TODO Testing facilities should be in separate module
    compile('com.sparkjava:spark-core:2.1') {
        exclude module: 'slf4j-simple'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Timestamped message sorting proxy.',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
}

// http://stackoverflow.com/questions/10986244/building-a-uberjar-with-gradle
task uberjar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources)
    from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': 'Foobar',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

task testJar(type: Jar, dependsOn: [':test']) {
    from files(sourceSets.test.output.classesDir)
    archiveName = "tests.jar"
}

task integrationTestJars(dependsOn: [':testJar', ':uberjar']) {
}

